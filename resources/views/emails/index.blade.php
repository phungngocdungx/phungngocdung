{{-- ... (ph·∫ßn HTML c·ªßa view gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc) ... --}}
<div class="container">
    <head>
        <title>H·ªôp th∆∞ ƒë·∫øn {{ $selectedAccount ? 'c·ªßa ' . $selectedAccount->email : '' }}</title>
        <meta name="csrf-token" content="{{ csrf_token() }}"> {{-- Quan tr·ªçng cho POST/PUT/DELETE AJAX n·∫øu c·∫ßn --}}
        <style>
            .btn-refresh-disabled {
                opacity: 0.65;
                cursor: not-allowed;
            }
        </style>
    </head>

    <h2>üì• H·ªôp th∆∞ ƒë·∫øn {{ $selectedAccount ? 'c·ªßa ' . $selectedAccount->email : '' }}</h2>

    <form method="GET" action="{{ route('emails.index') }}" class="mb-3" id="accountSelectForm">
        <div class="d-flex align-items-center gap-2">
            <label for="account_id">T√†i kho·∫£n:</label>
            <select name="account_id" id="account_id" class="form-select w-auto" onchange="this.form.submit()">
                @if($accounts->isEmpty())
                    <option value="">-- Ch∆∞a c√≥ t√†i kho·∫£n --</option>
                @else
                    @foreach($accounts as $acc)
                        <option value="{{ $acc->id }}" {{ (string)$selectedAccountId == (string)$acc->id ? 'selected' : '' }}>
                            {{ $acc->email }}
                        </option>
                    @endforeach
                @endif
            </select>
        </div>
    </form>

    <div class="mb-3">
        <button type="button" class="btn btn-primary" id="refreshEmailsButton">
            üîÑ L√†m m·ªõi H·ªôp th∆∞
        </button>
    </div>

    <div id="alertMessages">
        @if (session('status'))
            <div class="alert alert-success mt-3">{{ session('status') }}</div>
        @endif
        @if (session('error'))
            <div class="alert alert-danger mt-3">{{ session('error') }}</div>
        @endif
        @if ($error && !session('error') && !session('status')) {{-- Ch·ªâ hi·ªÉn th·ªã l·ªói t·ª´ controller n·∫øu kh√¥ng c√≥ l·ªói session --}}
            <div class="alert alert-danger mt-3">{{ $error }}</div>
        @endif
    </div>


    @if($selectedAccount && $emails->isNotEmpty())
        <table class="table table-hover table-bordered mt-3">
            <thead class="table-light">
                <tr>
                    <th>üìß Ch·ªß ƒë·ªÅ</th>
                    <th>üë§ Ng∆∞·ªùi g·ª≠i</th>
                    <th>üìÖ Ng√†y g·ª≠i</th>
                </tr>
            </thead>
            <tbody>
                @foreach($emails as $email)
                    <tr>
                        <td>{{ $email->subject }}</td>
                        <td>
                            {{ $email->from_name ?? $email->from ?? 'Kh√¥ng r√µ' }}
                            @if($email->from_name && $email->from && $email->from_name !== $email->from)
                                <small>&lt;{{ $email->from }}&gt;</small>
                            @endif
                        </td>
                        <td>
                            {{ $email->date ? $email->date->format('d/m/Y H:i:s') : 'Kh√¥ng r√µ' }}
                        </td>
                    </tr>
                @endforeach
            </tbody>
        </table>
         {{-- {{ $emails->links() }} --}}
    @elseif($selectedAccount && !$error)
        <div class="alert alert-info mt-3">Kh√¥ng c√≥ email n√†o trong h·ªôp th∆∞ c·ªßa t√†i kho·∫£n {{ $selectedAccount->email }}.</div>
    @elseif(!$selectedAccount && $accounts->isNotEmpty() && !$error)
        <div class="alert alert-info mt-3">Vui l√≤ng ch·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem email.</div>
    @endif
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const refreshButton = document.getElementById('refreshEmailsButton');
        const alertMessagesContainer = document.getElementById('alertMessages');
        const accountSelectElement = document.getElementById('account_id'); // L·∫•y select element

        let pollingIntervalId = null;
        let pollCount = 0;
        const maxPollCount = 20; 
        const pollFrequency = 5000; 
        const userInitiatedRefreshKey = 'user_initiated_email_refresh_for_account_'; // Th√™m account ID v√†o key

        // L·∫•y selectedAccountId t·ª´ PHP n·∫øu c√≥, ho·∫∑c t·ª´ select box n·∫øu ng∆∞·ªùi d√πng v·ª´a ƒë·ªïi
        let currentSelectedAccountId = '{{ $selectedAccountId ?? ($accounts->isNotEmpty() ? $accounts->first()->id : '') }}';
        if (accountSelectElement && accountSelectElement.value) {
            currentSelectedAccountId = accountSelectElement.value;
        }


        function getSessionKeyForCurrentAccount() {
            return userInitiatedRefreshKey + currentSelectedAccountId;
        }

        function setButtonState(state, message = null) {
            if (!refreshButton) return;

            if (state === 'loading') {
                refreshButton.classList.add('btn-refresh-disabled');
                refreshButton.disabled = true;
                refreshButton.innerHTML = message || '‚è≥ ƒêang g·ª≠i y√™u c·∫ßu...';
            } else if (state === 'polling') {
                refreshButton.classList.add('btn-refresh-disabled');
                refreshButton.disabled = true;
                refreshButton.innerHTML = message || '‚è≥ ƒêang ƒë·ªìng b·ªô h√≥a...';
            } else { 
                refreshButton.classList.remove('btn-refresh-disabled');
                refreshButton.disabled = false;
                refreshButton.innerHTML = 'üîÑ L√†m m·ªõi H·ªôp th∆∞';
            }
        }

        function showAlert(type, message, persistent = false) {
            if (!persistent) {
                alertMessagesContainer.innerHTML = ''; 
            }
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} mt-3`;
            alertDiv.textContent = message;
            alertMessagesContainer.appendChild(alertDiv);
        }

        async function checkJobStatus(isInitialLoad = false) {
            // N·∫øu kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn, kh√¥ng l√†m g√¨ c·∫£
            if (!currentSelectedAccountId) {
                setButtonState('idle'); // ƒê·∫£m b·∫£o n√∫t c√≥ th·ªÉ b·∫•m n·∫øu c√≥ t√†i kho·∫£n ƒë∆∞·ª£c th√™m sau
                return;
            }

            pollCount++;
            if (pollCount > maxPollCount && pollingIntervalId) { 
                console.warn('Polling timeout reached for account ' + currentSelectedAccountId);
                stopPolling();
                setButtonState('idle');
                showAlert('warning', 'Qu√° tr√¨nh ƒë·ªìng b·ªô m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau.');
                sessionStorage.removeItem(getSessionKeyForCurrentAccount());
                return;
            }

            try {
                const response = await fetch('{{ route('api.email.sync.status') }}', { // API n√†y v·∫´n ki·ªÉm tra chung
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                if (!response.ok) {
                    if (pollingIntervalId) stopPolling(); 
                    setButtonState('idle');
                    showAlert('danger', `L·ªói m√°y ch·ªß khi ki·ªÉm tra tr·∫°ng th√°i: ${response.status}`);
                    sessionStorage.removeItem(getSessionKeyForCurrentAccount());
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const userInitiatedThisAccount = sessionStorage.getItem(getSessionKeyForCurrentAccount()) === 'true';

                if (data.status === 'completed_refresh') {
                    console.log('API says: Email sync completed for some/all accounts.');
                    stopPolling(); 
                    setButtonState('idle');
                    if (userInitiatedThisAccount) { 
                        showAlert('success', 'ƒê·ªìng b·ªô email ho√†n t·∫•t! ƒêang t·∫£i l·∫°i trang...');
                        sessionStorage.removeItem(getSessionKeyForCurrentAccount());
                        setTimeout(() => {
                            let reloadUrl = '{{ route('emails.index') }}';
                            if (currentSelectedAccountId) {
                                reloadUrl += '?account_id=' + currentSelectedAccountId;
                            }
                            console.log('Reloading to: ' + reloadUrl);
                            window.location.href = reloadUrl; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn URL c√≥ account_id
                        }, 1500);
                    } else if (isInitialLoad) {
                        console.log('Initial load, sync already completed, no user action pending for account ' + currentSelectedAccountId);
                    }
                } else if (data.status === 'pending_refresh') {
                    console.log('API says: Email sync pending for some/all accounts...');
                    setButtonState('polling'); 
                    if (!pollingIntervalId) { 
                        startPolling(false); 
                    }
                } else {
                    console.warn('API returned unexpected status:', data.status);
                    if (pollingIntervalId) stopPolling();
                    setButtonState('idle');
                    sessionStorage.removeItem(getSessionKeyForCurrentAccount());
                }
            } catch (error) {
                console.error('Error checking job status:', error);
                if (pollingIntervalId) stopPolling(); 
                setButtonState('idle');
                sessionStorage.removeItem(getSessionKeyForCurrentAccount());
            }
        }

        function startPolling(initialCheck = true) {
            if (pollingIntervalId) clearInterval(pollingIntervalId); 
            pollCount = 0; 
            // Kh√¥ng ƒë·∫∑t polling ngay n·∫øu kh√¥ng c√≥ t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn
            if (!currentSelectedAccountId) {
                 console.log('No account selected, polling not started.');
                 setButtonState('idle'); // ƒê·∫£m b·∫£o n√∫t kh√¥ng b·ªã k·∫πt ·ªü tr·∫°ng th√°i loading/polling
                 return;
            }
            setButtonState('polling');
            if (initialCheck) {
                checkJobStatus(); 
            }
            pollingIntervalId = setInterval(checkJobStatus, pollFrequency);
        }

        function stopPolling() {
            if (pollingIntervalId) {
                clearInterval(pollingIntervalId);
                pollingIntervalId = null;
                console.log('Polling stopped for account ' + currentSelectedAccountId);
            }
        }

        if (refreshButton) {
            if (currentSelectedAccountId) { // Ch·ªâ ki·ªÉm tra tr·∫°ng th√°i n·∫øu c√≥ t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn
                checkJobStatus(true); 
            } else {
                setButtonState('idle'); // N·∫øu kh√¥ng c√≥ t√†i kho·∫£n n√†o, n√∫t ·ªü tr·∫°ng th√°i b√¨nh th∆∞·ªùng
                refreshButton.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t n·∫øu kh√¥ng c√≥ t√†i kho·∫£n
                refreshButton.classList.add('btn-refresh-disabled');
            }


            refreshButton.addEventListener('click', async function () {
                if (this.disabled) return; 
                
                // C·∫≠p nh·∫≠t l·∫°i currentSelectedAccountId ph√≤ng tr∆∞·ªùng h·ª£p trang kh√¥ng t·∫£i l·∫°i khi ch·ªçn t√†i kho·∫£n (m·∫∑c d√π c√≥ onchange submit)
                if (accountSelectElement && accountSelectElement.value) {
                    currentSelectedAccountId = accountSelectElement.value;
                }
                if (!currentSelectedAccountId) {
                    showAlert('warning', 'Vui l√≤ng ch·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ l√†m m·ªõi.');
                    return;
                }

                setButtonState('loading');
                alertMessagesContainer.innerHTML = ''; 
                showAlert('info', 'ƒêang g·ª≠i y√™u c·∫ßu l√†m m·ªõi h·ªôp th∆∞...');
                sessionStorage.setItem(getSessionKeyForCurrentAccount(), 'true'); 

                try {
                    // Route emails.triggerfetch s·∫Ω dispatch job cho T·∫§T C·∫¢ t√†i kho·∫£n
                    // API ki·ªÉm tra tr·∫°ng th√°i c≈©ng ki·ªÉm tra chung cho t·∫•t c·∫£ FetchMailJob
                    const response = await fetch('{{ route('emails.triggerfetch') }}', { 
                        method: 'GET', 
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                        }
                    });

                    const data = await response.json();

                    if (response.ok && data.jobs_dispatched) {
                        showAlert('info', data.message || 'ƒê√£ g·ª≠i y√™u c·∫ßu, ƒëang ch·ªù ƒë·ªìng b·ªô...');
                        startPolling(); 
                    } else {
                        throw new Error(data.message || 'Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu l√†m m·ªõi.');
                    }
                } catch (error) {
                    console.error('Error dispatching fetch job:', error);
                    setButtonState('idle');
                    showAlert('danger', error.message || 'L·ªói khi g·ª≠i y√™u c·∫ßu l√†m m·ªõi.');
                    sessionStorage.removeItem(getSessionKeyForCurrentAccount()); 
                }
            });
        }
    });
</script>
{{-- @endsection --}}

{{-- <td><b>{{ $email->from_name }}</b></td> --}}